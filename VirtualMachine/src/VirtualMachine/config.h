#ifndef _CONFIG_H_
#define _CONFIG_H_


// #include "board.h"

typedef struct{
	char port_num;
	char pin_num;
	char io;		// tells if this pin is configured as an input=1 or output=0..
}GPIOPin;

#define GPIOpin_t GPIOPin

#define round(x) ((x)>=0?(long)((x)+0.5):(long)((x)-0.5))

// this is the seconds multiplier..
#define SEC_MUL		(1000)

#define BACK_KEY 	0
#define UP_KEY  	1
#define DOWN_KEY 	2
#define ENTER_KEY 	3
#define KEY_BACK	0
#define KEY_UP		1
#define KEY_DOWN	2
#define KEY_ENTER	3

#define KEY_EDIT			7
#define KEY_DISPLAY			20
#define KEY_ARM_UP			8
#define KEY_ARM_DOWN		12
#define KEY_KICK_RIGHT		10
#define KEY_KICK_LEFT		9
#define KEY_SWING_IN		13
#define KEY_SWING_OUT		17
#define KEY_GRIP			14
#define KEY_RELEASE			18
#define KEY_VACUUM_GRIP		15
#define KEY_VACUUM_RELEASE	19

#define MAX_NUM_PARAMETERS 	MAX_MOVEMENT_NUM
#define MAX_NUM_SENSORS		9

#define ARM_UP_DOWN_SENSOR_STATE		INPUT_LEVEL_0
#define ARM_UP_DOWN_SENSOR_ACTIVATE		INPUT_0_FALL_FLAG
#define ARM_UP_DOWN_SENSOR_DEACTIVATE	INPUT_0_RISE_FLAG

#define SWING_INWARD_SENSOR_STATE		INPUT_LEVEL_1
#define SWING_INWARD_SENSOR_ACTIVATE	INPUT_1_FALL_FLAG
#define SWING_INWARD_SENSOR_DEACTIVATE	INPUT_1_RISE_FLAG

#define SWING_OUTWARD_SENSOR_STATE		INPUT_LEVEL_2
#define SWING_OUTWARD_SENSOR_ACTIVATE	INPUT_2_FALL_FLAG
#define SWING_OUTWARD_SENSOR_DEACTIVATE	INPUT_2_RISE_FLAG

#define GRIP_SENSOR_STATE				INPUT_LEVEL_3
#define GRIP_SENSOR_ACTIVATE			INPUT_3_FALL_FLAG
#define GRIP_SENSOR_DEACTIVATE			INPUT_3_RISE_FLAG

#define IMM_AUTO_MANUAL_STATE			INPUT_LEVEL_4
#define IMM_AUTO_MANUAL_ACTIVATE		INPUT_4_FALL_FLAG
#define IMM_AUTO_MANUAL_DEACTIVATE		INPUT_5_RISE_FLAG

#define SAFETY_DEVICE_STATE				INPUT_LEVEL_5
#define SAFETY_DEVICE_ACTIVATE			INPUT_5_FALL_FLAG
#define SAFETY_DEVICE_DEACTIVATE		INPUT_5_RISE_FLAG

#define MOULD_OPEN_STATE				INPUT_LEVEL_6
#define MOULD_OPEN_ACTIVATE				INPUT_6_FALL_FLAG
#define MOULD_OPEN_DEACTIVATE			INPUT_6_RISE_FLAG

#define EMERGENCY_STOP_IMM_STATE		INPUT_LEVEL_7
#define EMERGENCY_STOP_IMM_ACTIVATE		INPUT_7_FALL_FLAG
#define EMERGENCY_STOP_IMM_DEACTIVATE	INPUT_7_RISE_FLAG

#define VACUUM_SUCTION_STATE			INPUT_LEVEL_8
#define VACUUM_SUCTION_ACTIVATE			INPUT_8_FALL_FLAG
#define VACUUM_SUCTION_DEACTIVATE		INPUT_8_RISE_FLAG

#define HOMING_DIRECTION		1
#define HOST_BAUD           (115200)

#define WDOG()

#define	ARM_ISSUE				11
#define	SWING_IN_ISSUE			12
#define	SWING_OUT_ISSUE			14
#define	GRIPPER_ISSUE			18
#define	VACUUM_ISSUE			26
#define	IMM_AUTO_MANUAL_ISSUE	42
#define	SAFETY_DEVICE_ISSUE		74
#define	MOLD_OPEN_ISSUE			138
#define	E_STOP_ISSUE			266

#define MAX_MOVEMENT_NUM	12

enum SENSOR_ARRAY{
	SENSOR_UP_DOWN = 0,
	SENSOR_SWING_IN = 1,
	SENSOR_SWING_OUT = 2,
	SENSOR_GRIP = 3,	
	SENSOR_IMM_AUTO_MANUAL = 4,
	SENSOR_SAFETY_DEVICE = 5,
	SENSOR_MOLD_OPEN = 6,
	SENSOR_EMERGENCY_STOP = 7,
	SENSOR_VACUUM = 8,
};

enum MOVEMENT_ARRAY{
	MOVE_UP = 0,
	MOVE_DOWN = 1,
	MOVE_FORWARD = 2,
	MOVE_BACKWARD = 3,
	MOVE_SWING_IN = 4,
	MOVE_SWING_OUT = 5,
	MOVE_GRIP = 6,
	MOVE_RELEASE = 7,
	MOVE_VACUUM_GRIP = 8,
	MOVE_VACUUM_RELEASE = 9,
	MOVE_CONVEYOR = 10,
	MOVE_CONVEYOR_STOP = 11,
	BUZZER_WARNING_START = 12,
	BUZZER_WARNING_STOP = 13,
	MOLD_AREA_FREE = 14,
	ENABLE_EJECTOR_FORWARD = 15,
	EMERGENCY_STOP_ROBOT = 16,
};

enum DELAY_TYPES {
	DELAY_HEARTBEAT = 0x00,
	DELAY_KEY_TASK_SCAN=0x01,
	DELAY_KEY_TASK_GETKEY=0x02,
	DELAY_DISPLAY_UPDATE=0x03,
	DELAY_SWITCH_UPDATE = 0x04,
	DELAY_IO_UPDATE = 0x05,
	DELAY_SPI_TRANSFER = 0x06,
	DELAY_AFTER_CYCLE_COMPLETE,
	DELAY_FOR_CHECKING_INPUT,
	DELAY_ERROR_DISPLAY,
	DELAY_BLINK_DIGIT,
	DELAY_ROBOT_MOVEMENT,
	DELAY_ANIMATE_DISPLAY,
	DELAY_TOTAL_NUM,
};

#define DELAY_VAL_FOR_CHECKING_INPUT 1000

#define ARM_PREV_INPUT_MASK			(1 << SENSOR_IMM_AUTO_MANUAL) | (1 << SENSOR_UP_DOWN)
#define ARMUP_REQ_PREV_INPUT_MASK	(1 << SENSOR_UP_DOWN)
#define ARMDN_REQ_PREV_INPUT_MASK	0

/* In Arm Swing In, the conditions to be checked
	1. Arm in UP or Down condition..
		a. if Arm UP condition 
			then let it swing..
		b. if Arm Down condition
			then no swing..
		This has been taken care in the hardware..	
*/
#define ARM_SWING_PREV_INPUT_MASK		(1 << SENSOR_IMM_AUTO_MANUAL) | (1 << SENSOR_SWING_OUT) | (1 << SENSOR_SWING_IN)
#define SWINGIN_REQ_PREV_INPUT_MASK		(1 << SENSOR_SWING_IN)
#define SWINGOUT_REQ_PREV_INPUT_MASK	(1 << SENSOR_SWING_OUT)

#define GRIPPER_PREV_INPUT_MASK				(1 << SENSOR_IMM_AUTO_MANUAL)
#define GRIP_REQ_CLOSE_PREV_INPUT_MASK		(0)
#define GRIP_REQ_RELEASE_PREV_INPUT_MASK	(0)

#define FWD_BACKWD_PREV_INPUT_MASK		(1 << SENSOR_IMM_AUTO_MANUAL)
#define FWD_REQ_PREV_INPUT_MASK			(0)
#define BACKWD_REQ_PREV_INPUT_MASK		(0)

#define OUTNUM_ARM_UP 			0
#define OUTNUM_ARM_DN 			0
#define OUTNUM_FWD    			1
#define OUTNUM_BACK   			1
#define OUTNUM_SWING_IN			2
#define OUTNUM_SWING_OUT		3	
#define OUTNUM_GRIP_CLOSE   	4
#define OUTNUM_GRIP_RELEASE 	4
#define OUTNUM_VAC_ON			5
#define OUTNUM_VAC_OFF			5
#define OUTNUM_EJECT_FWD		6
#define OUTNUM_MOLD_AREA_FREE 	7
#define OUTNUM_CONVEYOR_ON 		8
#define OUTNUM_CONVEYOR_OFF 	8
#define OUTNUM_SILICONE			9

#define OUTDIR_ARM_UP 			0
#define OUTDIR_ARM_DN 			1
#define OUTDIR_FWD    			0
#define OUTDIR_BACK   			1
#define OUTDIR_SWING_IN			1
#define OUTDIR_SWING_OUT		1	
#define OUTDIR_GRIP_CLOSE   	1
#define OUTDIR_GRIP_RELEASE 	0
#define OUTDIR_VAC_ON			1
#define OUTDIR_VAC_OFF			0
#define OUTDIR_EJECT_FWD		1
#define OUTDIR_MOLD_AREA_FREE 	1
#define OUTDIR_CONVEYOR_ON  	1
#define OUTDIR_CONVEYOR_OFF 	0
#define OUTDIR_SILICONE			1

#endif
